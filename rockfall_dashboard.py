import streamlit as st
import joblib
import numpy as np
from PIL import Image
import pandas as pd

# --- Enhanced Simulated Image Analysis Component ---
# This function is self-contained and acts as our computer vision model.
def analyze_drone_image(image_file):
    """
    (Simulated) Analyzes a drone image to extract features relevant to rockfall.
    This enhanced version provides more dynamic output for a convincing demo.
    """
    st.info("Analyzing image for cracks and erosion...")
    
    # We use the file name to simulate different outcomes.
    # The filename can be a powerful tool for your demo.
    filename = image_file.name.lower()
    if "unstable" in filename or "critical" in filename or "cracks" in filename:
        # Generate high scores for these keywords
        crack_severity = np.random.uniform(0.7, 0.95)
        erosion_index = np.random.uniform(0.65, 0.9)
    # Simulating a low-risk photo
    elif "stable" in filename or "clean" in filename or "scenic" in filename:
        # Generate low scores for these keywords
        crack_severity = np.random.uniform(0.1, 0.3)
        erosion_index = np.random.uniform(0.05, 0.2)
    # Default case for other filenames
    else:
        crack_severity = np.random.uniform(0.3, 0.7)
        erosion_index = np.random.uniform(0.2, 0.6)
    
    return {
        'crack_severity': crack_severity,
        'erosion_index': erosion_index
    }

# --- Load the Model and Features ---
# These files are generated by running model.py first.
try:
    model = joblib.load('rockfall_model.joblib')
    MODEL_FEATURES = joblib.load('model_features.joblib')
    st.success("Prediction model and features loaded successfully!")
except FileNotFoundError:
    st.error("Model files not found. Please run 'model.py' first to train the model.")
    st.stop()

# --- Dashboard UI ---
st.set_page_config(page_title="Rockfall Alert System", layout="wide")
st.title('AI-Based Rockfall Alert System ‚öíÔ∏è')
st.markdown("This prototype combines **drone imagery analysis** with **sensor data** for robust rockfall prediction.")
st.write("---")

# --- Status Box ---
risk_placeholder = st.empty()

# --- Input Sections ---
st.header("Sensor and Image Data")
col1, col2 = st.columns(2)

with col1:
    st.subheader("Sensor Readings")
    elevation = st.number_input('Elevation (m)', value=500.0, step=1.0)
    slope = st.number_input('Slope (¬∞)', value=45.0, step=0.1)
    rainfall_mm = st.number_input('Rainfall (mm)', value=15.0, step=0.1)
    snow_mm = st.number_input('Snow (mm)', value=3.0, step=0.1)
    temperature_c = st.number_input('Temperature (¬∞C)', value=10.0, step=0.1)
    wind_speed_kmh = st.number_input('Wind Speed (km/h)', value=12.0, step=0.1)
    fracture_density = st.number_input('Fracture Density (score)', value=8.0, step=0.1)

with col2:
    st.subheader("Drone Image Upload")
    uploaded_file = st.file_uploader("Upload Drone Image", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image', use_column_width=True)

# --- Prediction Button and Logic ---
st.write("---")
if st.button('Predict Rockfall', use_container_width=True):
    if uploaded_file is None:
        st.warning("Please upload a drone image to proceed with prediction.")
    else:
        with st.spinner('Analyzing data and predicting...'):
            try:
                # 1. Image Analysis: Extract features from the uploaded image
                image_features = analyze_drone_image(uploaded_file)
                
                # 2. Prepare all features for the model
                sensor_data = {
                    'Elevation': elevation,
                    'Slope': slope,
                    'Rainfall_mm': rainfall_mm,
                    'Snow_mm': snow_mm,
                    'Temperature_C': temperature_c,
                    'Wind_speed_kmh': wind_speed_kmh,
                    'Fracture_Density': fracture_density
                }
                
                # 3. Combine all features into a single dictionary
                combined_features = {**sensor_data, **image_features}
                
                # --- FIX FOR THE WARNING ---
                # Create a DataFrame with a single row and the correct feature names
                input_data = pd.DataFrame([combined_features])
                # Ensure the columns are in the same order the model expects
                input_data = input_data[MODEL_FEATURES]
                # --- END FIX ---

                # 4. Get Prediction
                prediction = model.predict(input_data)
                probability_high = model.predict_proba(input_data)[0][1]
                risk_level = "High" if prediction[0] == 1 else "Low"

                # --- Display Results ---
                if risk_level == "High":
                    risk_placeholder.markdown(f'<div class="status-box status-high">RISK: HIGH<br>({probability_high*100:.2f}%)</div>', unsafe_allow_html=True)
                    st.toast('üö® Rockfall ALERT: High risk detected!')
                else:
                    risk_placeholder.markdown(f'<div class="status-box status-low">RISK: LOW<br>({probability_high*100:.2f}%)</div>', unsafe_allow_html=True)
                
                st.subheader("Prediction Details")
                st.markdown(f"**Risk Level:** **{risk_level.upper()}**")
                st.markdown(f"**Probability of High Risk:** `{probability_high:.2f}`")
                st.markdown(f"**Image Analysis Features:**")
                st.markdown(f"  - Crack Severity: `{image_features['crack_severity']:.2f}`")
                st.markdown(f"  - Erosion Index: `{image_features['erosion_index']:.2f}`")
            
            except Exception as e:
                st.error(f"An error occurred: {e}")

# --- CSS for Styling ---
st.markdown("""
<style>
    .stButton > button {
        background-color: #00796b;
        color: white;
        border-radius: 5px;
        font-size: 1.1em;
        border: none;
    }
    .status-box {
        text-align: center;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
        font-size: 2.2em;
        font-weight: bold;
        color: white;
    }
    .status-low {
        background-color: #4CAF50;
    }
    .status-high {
        background-color: #f44336;
        animation: pulse 1s infinite;
    }
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(244,67,54,0.7); }
        70% { box-shadow: 0 0 0 10px rgba(244,67,54,0); }
        100% { box-shadow: 0 0 0 0 rgba(244,67,54,0); }
    }
</style>
""", unsafe_allow_html=True)
